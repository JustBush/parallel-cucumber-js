#!/usr/bin/env node

'use strict';

var Yargs = require('yargs');
var Debug = require('debug')('parallel-cucumber-js');
var ParallelCucumber = require('../lib/parallel_cucumber');


function exit(code) {
  Debug("Exiting with code " + code);

  // See https://github.com/joyent/node/issues/3737 for more information
  // on why the process exit event is used
  process.on('exit', function() {
    process.exit(code);
  });
};

var optimist = Yargs
  .usage('Usage: $0 options [FILE|DIR]*')
  .options('h', {
    alias: 'help',
    describe: 'Displays this help message'
  })
  .options('c', {
    alias: 'config',
    describe: 'Path to the config file'
  })
  .options('f', {
    alias: 'format',
    describe: 'How to format the results of executing features.  Syntax is FORMAT[:PATH] where FORMAT can be json or progress or the path to a custom formatter script.  The default format is progress.  If specified, PATH is the file that output will be written to'
  })
  .options('w', {
    alias: 'workers',
    default: 2,
    describe: 'Number of instances of cucumber to run in parallel'
  })
  .options('r', {
    alias: 'require',
    describe: 'Require support code files before executing the features.  Specifying this option disables automatic loading.'
  })
  .options('t', {
    alias: 'tags',
    describe: 'Tags of the features or scenarios to execute.  Sets the tags for the default profile.  Use --profile.name.tags to set the tags for a profile'
  })
  .options('profiles.name.tags', {
    describe: 'Tags of the features or scenarios to execute for a profile.  Replace name in the arg with the name of the profile'
  })
  .options('d', {
    alias: 'dry-run',
    boolean: true,
    default: false,
    describe: 'Enables cucumber\'s dry run mode'
  })
  .options('debug', {
    describe: 'Starts cucumber workers in debug mode.  Pass a number to set the port the first worker should listen on.  Subsequent workers will increment the port number.  Default debug port is the node.js standard of 5858'
  })
  .options('debug-brk', {
    describe: 'Starts cucumber workers in debug mode and breaks on the first line.  Accepts an optional port number like --debug'
  });
var argv = optimist.argv;

if (argv.help) {
  optimist.showHelp();
  exit(0);
}
else {
  var options = {
    configFilePath: argv['config'],
    formats: argv['format'],
    workerCount: argv['workers'],
    supportCodePaths: argv['require'],
    tags: argv['tags'],
    profiles: argv['profiles'],
    dryRun: argv['dry-run'],
    debug: argv['debug'],
    debugBrk: argv['debug-brk'],
    featurePaths: argv._
  };

  Debug('Options ' + JSON.stringify(options));

  ParallelCucumber.Cli.Main(options).run(function(err, info) {
    if (err) {
      Debug('Exiting');
      console.error(err);
      exit(2);
    }
    else {
      var code = info.success ? 0 : 1;
      exit(code);
    }
  });
}
